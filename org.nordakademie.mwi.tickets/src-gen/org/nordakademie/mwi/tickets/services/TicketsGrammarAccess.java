/*
* generated by Xtext
*/
package org.nordakademie.mwi.tickets.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TicketsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TicketSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TicketSystem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStatesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStatesStatusParserRuleCall_0_0 = (RuleCall)cStatesAssignment_0.eContents().get(0);
		private final Assignment cFlowsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFlowsFlowParserRuleCall_1_0 = (RuleCall)cFlowsAssignment_1.eContents().get(0);
		private final Assignment cFieldsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFieldsFieldParserRuleCall_2_0 = (RuleCall)cFieldsAssignment_2.eContents().get(0);
		private final Assignment cCategoriesAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cCategoriesTicketCategoryParserRuleCall_3_0 = (RuleCall)cCategoriesAssignment_3.eContents().get(0);
		private final Assignment cRolesAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cRolesRoleParserRuleCall_4_0 = (RuleCall)cRolesAssignment_4.eContents().get(0);
		
		//TicketSystem:
		//	(states+=Status | flows+=Flow | fields+=Field | categories+=TicketCategory | roles+=Role)*;
		public ParserRule getRule() { return rule; }

		//(states+=Status | flows+=Flow | fields+=Field | categories+=TicketCategory | roles+=Role)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//states+=Status
		public Assignment getStatesAssignment_0() { return cStatesAssignment_0; }

		//Status
		public RuleCall getStatesStatusParserRuleCall_0_0() { return cStatesStatusParserRuleCall_0_0; }

		//flows+=Flow
		public Assignment getFlowsAssignment_1() { return cFlowsAssignment_1; }

		//Flow
		public RuleCall getFlowsFlowParserRuleCall_1_0() { return cFlowsFlowParserRuleCall_1_0; }

		//fields+=Field
		public Assignment getFieldsAssignment_2() { return cFieldsAssignment_2; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_2_0() { return cFieldsFieldParserRuleCall_2_0; }

		//categories+=TicketCategory
		public Assignment getCategoriesAssignment_3() { return cCategoriesAssignment_3; }

		//TicketCategory
		public RuleCall getCategoriesTicketCategoryParserRuleCall_3_0() { return cCategoriesTicketCategoryParserRuleCall_3_0; }

		//roles+=Role
		public Assignment getRolesAssignment_4() { return cRolesAssignment_4; }

		//Role
		public RuleCall getRolesRoleParserRuleCall_4_0() { return cRolesRoleParserRuleCall_4_0; }
	}

	public class StatusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Status");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Status:
		//	"status" name=QualifiedName description=STRING ";";
		public ParserRule getRule() { return rule; }

		//"status" name=QualifiedName description=STRING ";"
		public Group getGroup() { return cGroup; }

		//"status"
		public Keyword getStatusKeyword_0() { return cStatusKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class FlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Flow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cStatesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cStatesStatusCrossReference_3_0_0 = (CrossReference)cStatesAssignment_3_0.eContents().get(0);
		private final RuleCall cStatesStatusQualifiedNameParserRuleCall_3_0_0_1 = (RuleCall)cStatesStatusCrossReference_3_0_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Flow:
		//	"flow" name=QualifiedName "{" (states+=[Status|QualifiedName] ";")* "}";
		public ParserRule getRule() { return rule; }

		//"flow" name=QualifiedName "{" (states+=[Status|QualifiedName] ";")* "}"
		public Group getGroup() { return cGroup; }

		//"flow"
		public Keyword getFlowKeyword_0() { return cFlowKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(states+=[Status|QualifiedName] ";")*
		public Group getGroup_3() { return cGroup_3; }

		//states+=[Status|QualifiedName]
		public Assignment getStatesAssignment_3_0() { return cStatesAssignment_3_0; }

		//[Status|QualifiedName]
		public CrossReference getStatesStatusCrossReference_3_0_0() { return cStatesStatusCrossReference_3_0_0; }

		//QualifiedName
		public RuleCall getStatesStatusQualifiedNameParserRuleCall_3_0_0_1() { return cStatesStatusQualifiedNameParserRuleCall_3_0_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cFieldTypeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cFieldTypeFieldTypeEnumRuleCall_3_0_0 = (RuleCall)cFieldTypeAssignment_3_0.eContents().get(0);
		private final Assignment cFieldEnumAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cFieldEnumEnumParserRuleCall_3_1_0 = (RuleCall)cFieldEnumAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Field:
		//	"field" name=QualifiedName label=STRING (fieldType=FieldType | fieldEnum=Enum) ";";
		public ParserRule getRule() { return rule; }

		//"field" name=QualifiedName label=STRING (fieldType=FieldType | fieldEnum=Enum) ";"
		public Group getGroup() { return cGroup; }

		//"field"
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//label=STRING
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0() { return cLabelSTRINGTerminalRuleCall_2_0; }

		//fieldType=FieldType | fieldEnum=Enum
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//fieldType=FieldType
		public Assignment getFieldTypeAssignment_3_0() { return cFieldTypeAssignment_3_0; }

		//FieldType
		public RuleCall getFieldTypeFieldTypeEnumRuleCall_3_0_0() { return cFieldTypeFieldTypeEnumRuleCall_3_0_0; }

		//fieldEnum=Enum
		public Assignment getFieldEnumAssignment_3_1() { return cFieldEnumAssignment_3_1; }

		//Enum
		public RuleCall getFieldEnumEnumParserRuleCall_3_1_0() { return cFieldEnumEnumParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionSTRINGTerminalRuleCall_1_0 = (RuleCall)cOptionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOptionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOptionSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cOptionAssignment_2_1.eContents().get(0);
		
		//Enum:
		//	"enum" option+=STRING ("," option+=STRING)*;
		public ParserRule getRule() { return rule; }

		//"enum" option+=STRING ("," option+=STRING)*
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//option+=STRING
		public Assignment getOptionAssignment_1() { return cOptionAssignment_1; }

		//STRING
		public RuleCall getOptionSTRINGTerminalRuleCall_1_0() { return cOptionSTRINGTerminalRuleCall_1_0; }

		//("," option+=STRING)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//option+=STRING
		public Assignment getOptionAssignment_2_1() { return cOptionAssignment_2_1; }

		//STRING
		public RuleCall getOptionSTRINGTerminalRuleCall_2_1_0() { return cOptionSTRINGTerminalRuleCall_2_1_0; }
	}

	public class TicketCategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TicketCategory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTicketCategoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFlowKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFlowAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cFlowFlowCrossReference_4_1_0 = (CrossReference)cFlowAssignment_4_1.eContents().get(0);
		private final RuleCall cFlowFlowQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cFlowFlowCrossReference_4_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cFieldsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cTicketFieldsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cTicketFieldsTicketFieldParserRuleCall_6_0_0 = (RuleCall)cTicketFieldsAssignment_6_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//TicketCategory:
		//	"ticketCategory" name=QualifiedName description=STRING "{" ("flow" flow=[Flow|QualifiedName] ";")? "fields {"
		//	(ticketFields+=TicketField ";")* "}" "}";
		public ParserRule getRule() { return rule; }

		//"ticketCategory" name=QualifiedName description=STRING "{" ("flow" flow=[Flow|QualifiedName] ";")? "fields {"
		//(ticketFields+=TicketField ";")* "}" "}"
		public Group getGroup() { return cGroup; }

		//"ticketCategory"
		public Keyword getTicketCategoryKeyword_0() { return cTicketCategoryKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("flow" flow=[Flow|QualifiedName] ";")?
		public Group getGroup_4() { return cGroup_4; }

		//"flow"
		public Keyword getFlowKeyword_4_0() { return cFlowKeyword_4_0; }

		//flow=[Flow|QualifiedName]
		public Assignment getFlowAssignment_4_1() { return cFlowAssignment_4_1; }

		//[Flow|QualifiedName]
		public CrossReference getFlowFlowCrossReference_4_1_0() { return cFlowFlowCrossReference_4_1_0; }

		//QualifiedName
		public RuleCall getFlowFlowQualifiedNameParserRuleCall_4_1_0_1() { return cFlowFlowQualifiedNameParserRuleCall_4_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }

		//"fields {"
		public Keyword getFieldsKeyword_5() { return cFieldsKeyword_5; }

		//(ticketFields+=TicketField ";")*
		public Group getGroup_6() { return cGroup_6; }

		//ticketFields+=TicketField
		public Assignment getTicketFieldsAssignment_6_0() { return cTicketFieldsAssignment_6_0; }

		//TicketField
		public RuleCall getTicketFieldsTicketFieldParserRuleCall_6_0_0() { return cTicketFieldsTicketFieldParserRuleCall_6_0_0; }

		//";"
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class TicketFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TicketField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFieldAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFieldFieldCrossReference_0_0 = (CrossReference)cFieldAssignment_0.eContents().get(0);
		private final RuleCall cFieldFieldQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cFieldFieldCrossReference_0_0.eContents().get(1);
		private final Assignment cMandatoryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cMandatoryMandatoryKeyword_1_0 = (Keyword)cMandatoryAssignment_1.eContents().get(0);
		private final Assignment cNotOnListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNotOnListNotOnListKeyword_2_0 = (Keyword)cNotOnListAssignment_2.eContents().get(0);
		
		//TicketField:
		//	field=[Field|QualifiedName] mandatory?="mandatory"? notOnList?="notOnList"?;
		public ParserRule getRule() { return rule; }

		//field=[Field|QualifiedName] mandatory?="mandatory"? notOnList?="notOnList"?
		public Group getGroup() { return cGroup; }

		//field=[Field|QualifiedName]
		public Assignment getFieldAssignment_0() { return cFieldAssignment_0; }

		//[Field|QualifiedName]
		public CrossReference getFieldFieldCrossReference_0_0() { return cFieldFieldCrossReference_0_0; }

		//QualifiedName
		public RuleCall getFieldFieldQualifiedNameParserRuleCall_0_0_1() { return cFieldFieldQualifiedNameParserRuleCall_0_0_1; }

		//mandatory?="mandatory"?
		public Assignment getMandatoryAssignment_1() { return cMandatoryAssignment_1; }

		//"mandatory"
		public Keyword getMandatoryMandatoryKeyword_1_0() { return cMandatoryMandatoryKeyword_1_0; }

		//notOnList?="notOnList"?
		public Assignment getNotOnListAssignment_2() { return cNotOnListAssignment_2; }

		//"notOnList"
		public Keyword getNotOnListNotOnListKeyword_2_0() { return cNotOnListNotOnListKeyword_2_0; }
	}

	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Role");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cRolepermissionsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cRolepermissionsRolePermissionParserRuleCall_4_0_0 = (RuleCall)cRolepermissionsAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Role:
		//	"role" name=QualifiedName description=STRING "{" (rolepermissions+=RolePermission ";")* "}";
		public ParserRule getRule() { return rule; }

		//"role" name=QualifiedName description=STRING "{" (rolepermissions+=RolePermission ";")* "}"
		public Group getGroup() { return cGroup; }

		//"role"
		public Keyword getRoleKeyword_0() { return cRoleKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(rolepermissions+=RolePermission ";")*
		public Group getGroup_4() { return cGroup_4; }

		//rolepermissions+=RolePermission
		public Assignment getRolepermissionsAssignment_4_0() { return cRolepermissionsAssignment_4_0; }

		//RolePermission
		public RuleCall getRolepermissionsRolePermissionParserRuleCall_4_0_0() { return cRolepermissionsRolePermissionParserRuleCall_4_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class RolePermissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RolePermission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFieldAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFieldFieldCrossReference_0_0 = (CrossReference)cFieldAssignment_0.eContents().get(0);
		private final RuleCall cFieldFieldQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cFieldFieldCrossReference_0_0.eContents().get(1);
		private final Assignment cPermissionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPermissionsPermissionEnumRuleCall_1_0 = (RuleCall)cPermissionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPermissionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPermissionsPermissionEnumRuleCall_2_1_0 = (RuleCall)cPermissionsAssignment_2_1.eContents().get(0);
		
		//RolePermission:
		//	field=[Field|QualifiedName] permissions+=Permission ("," permissions+=Permission)*;
		public ParserRule getRule() { return rule; }

		//field=[Field|QualifiedName] permissions+=Permission ("," permissions+=Permission)*
		public Group getGroup() { return cGroup; }

		//field=[Field|QualifiedName]
		public Assignment getFieldAssignment_0() { return cFieldAssignment_0; }

		//[Field|QualifiedName]
		public CrossReference getFieldFieldCrossReference_0_0() { return cFieldFieldCrossReference_0_0; }

		//QualifiedName
		public RuleCall getFieldFieldQualifiedNameParserRuleCall_0_0_1() { return cFieldFieldQualifiedNameParserRuleCall_0_0_1; }

		//permissions+=Permission
		public Assignment getPermissionsAssignment_1() { return cPermissionsAssignment_1; }

		//Permission
		public RuleCall getPermissionsPermissionEnumRuleCall_1_0() { return cPermissionsPermissionEnumRuleCall_1_0; }

		//("," permissions+=Permission)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//permissions+=Permission
		public Assignment getPermissionsAssignment_2_1() { return cPermissionsAssignment_2_1; }

		//Permission
		public RuleCall getPermissionsPermissionEnumRuleCall_2_1_0() { return cPermissionsPermissionEnumRuleCall_2_1_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class PermissionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Permission");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCreateEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCreateCreateKeyword_0_0 = (Keyword)cCreateEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cReadEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cReadReadKeyword_1_0 = (Keyword)cReadEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cModifyEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cModifyModifyKeyword_2_0 = (Keyword)cModifyEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDeleteEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDeleteDeleteKeyword_3_0 = (Keyword)cDeleteEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Permission:
		//	create | read | modify | delete;
		public EnumRule getRule() { return rule; }

		//create | read | modify | delete
		public Alternatives getAlternatives() { return cAlternatives; }

		//create
		public EnumLiteralDeclaration getCreateEnumLiteralDeclaration_0() { return cCreateEnumLiteralDeclaration_0; }

		//"create"
		public Keyword getCreateCreateKeyword_0_0() { return cCreateCreateKeyword_0_0; }

		//read
		public EnumLiteralDeclaration getReadEnumLiteralDeclaration_1() { return cReadEnumLiteralDeclaration_1; }

		//"read"
		public Keyword getReadReadKeyword_1_0() { return cReadReadKeyword_1_0; }

		//modify
		public EnumLiteralDeclaration getModifyEnumLiteralDeclaration_2() { return cModifyEnumLiteralDeclaration_2; }

		//"modify"
		public Keyword getModifyModifyKeyword_2_0() { return cModifyModifyKeyword_2_0; }

		//delete
		public EnumLiteralDeclaration getDeleteEnumLiteralDeclaration_3() { return cDeleteEnumLiteralDeclaration_3; }

		//"delete"
		public Keyword getDeleteDeleteKeyword_3_0() { return cDeleteDeleteKeyword_3_0; }
	}

	public class FieldTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FieldType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUserEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUserUserKeyword_0_0 = (Keyword)cUserEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cStringStringKeyword_1_0 = (Keyword)cStringEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDateDateKeyword_2_0 = (Keyword)cDateEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDateTimeEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDateTimeDateTimeKeyword_3_0 = (Keyword)cDateTimeEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cIntIntKeyword_4_0 = (Keyword)cIntEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDecimalEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDecimalDecimalKeyword_5_0 = (Keyword)cDecimalEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cBooleanBooleanKeyword_6_0 = (Keyword)cBooleanEnumLiteralDeclaration_6.eContents().get(0);
		
		//// TODO user
		//enum FieldType:
		//	user | String | Date | dateTime | int | decimal | boolean;
		public EnumRule getRule() { return rule; }

		//user | String | Date | dateTime | int | decimal | boolean
		public Alternatives getAlternatives() { return cAlternatives; }

		//user
		public EnumLiteralDeclaration getUserEnumLiteralDeclaration_0() { return cUserEnumLiteralDeclaration_0; }

		//"user"
		public Keyword getUserUserKeyword_0_0() { return cUserUserKeyword_0_0; }

		//String
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_1() { return cStringEnumLiteralDeclaration_1; }

		//"String"
		public Keyword getStringStringKeyword_1_0() { return cStringStringKeyword_1_0; }

		//Date
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_2() { return cDateEnumLiteralDeclaration_2; }

		//"Date"
		public Keyword getDateDateKeyword_2_0() { return cDateDateKeyword_2_0; }

		//dateTime
		public EnumLiteralDeclaration getDateTimeEnumLiteralDeclaration_3() { return cDateTimeEnumLiteralDeclaration_3; }

		//"dateTime"
		public Keyword getDateTimeDateTimeKeyword_3_0() { return cDateTimeDateTimeKeyword_3_0; }

		//int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_4() { return cIntEnumLiteralDeclaration_4; }

		//"int"
		public Keyword getIntIntKeyword_4_0() { return cIntIntKeyword_4_0; }

		//decimal
		public EnumLiteralDeclaration getDecimalEnumLiteralDeclaration_5() { return cDecimalEnumLiteralDeclaration_5; }

		//"decimal"
		public Keyword getDecimalDecimalKeyword_5_0() { return cDecimalDecimalKeyword_5_0; }

		//boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_6() { return cBooleanEnumLiteralDeclaration_6; }

		//"boolean"
		public Keyword getBooleanBooleanKeyword_6_0() { return cBooleanBooleanKeyword_6_0; }
	}
	
	private final TicketSystemElements pTicketSystem;
	private final StatusElements pStatus;
	private final FlowElements pFlow;
	private final FieldElements pField;
	private final EnumElements pEnum;
	private final TicketCategoryElements pTicketCategory;
	private final TicketFieldElements pTicketField;
	private final RoleElements pRole;
	private final RolePermissionElements pRolePermission;
	private final PermissionElements unknownRulePermission;
	private final FieldTypeElements unknownRuleFieldType;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TicketsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTicketSystem = new TicketSystemElements();
		this.pStatus = new StatusElements();
		this.pFlow = new FlowElements();
		this.pField = new FieldElements();
		this.pEnum = new EnumElements();
		this.pTicketCategory = new TicketCategoryElements();
		this.pTicketField = new TicketFieldElements();
		this.pRole = new RoleElements();
		this.pRolePermission = new RolePermissionElements();
		this.unknownRulePermission = new PermissionElements();
		this.unknownRuleFieldType = new FieldTypeElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.nordakademie.mwi.tickets.Tickets".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TicketSystem:
	//	(states+=Status | flows+=Flow | fields+=Field | categories+=TicketCategory | roles+=Role)*;
	public TicketSystemElements getTicketSystemAccess() {
		return pTicketSystem;
	}
	
	public ParserRule getTicketSystemRule() {
		return getTicketSystemAccess().getRule();
	}

	//Status:
	//	"status" name=QualifiedName description=STRING ";";
	public StatusElements getStatusAccess() {
		return pStatus;
	}
	
	public ParserRule getStatusRule() {
		return getStatusAccess().getRule();
	}

	//Flow:
	//	"flow" name=QualifiedName "{" (states+=[Status|QualifiedName] ";")* "}";
	public FlowElements getFlowAccess() {
		return pFlow;
	}
	
	public ParserRule getFlowRule() {
		return getFlowAccess().getRule();
	}

	//Field:
	//	"field" name=QualifiedName label=STRING (fieldType=FieldType | fieldEnum=Enum) ";";
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//Enum:
	//	"enum" option+=STRING ("," option+=STRING)*;
	public EnumElements getEnumAccess() {
		return pEnum;
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}

	//TicketCategory:
	//	"ticketCategory" name=QualifiedName description=STRING "{" ("flow" flow=[Flow|QualifiedName] ";")? "fields {"
	//	(ticketFields+=TicketField ";")* "}" "}";
	public TicketCategoryElements getTicketCategoryAccess() {
		return pTicketCategory;
	}
	
	public ParserRule getTicketCategoryRule() {
		return getTicketCategoryAccess().getRule();
	}

	//TicketField:
	//	field=[Field|QualifiedName] mandatory?="mandatory"? notOnList?="notOnList"?;
	public TicketFieldElements getTicketFieldAccess() {
		return pTicketField;
	}
	
	public ParserRule getTicketFieldRule() {
		return getTicketFieldAccess().getRule();
	}

	//Role:
	//	"role" name=QualifiedName description=STRING "{" (rolepermissions+=RolePermission ";")* "}";
	public RoleElements getRoleAccess() {
		return pRole;
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}

	//RolePermission:
	//	field=[Field|QualifiedName] permissions+=Permission ("," permissions+=Permission)*;
	public RolePermissionElements getRolePermissionAccess() {
		return pRolePermission;
	}
	
	public ParserRule getRolePermissionRule() {
		return getRolePermissionAccess().getRule();
	}

	//enum Permission:
	//	create | read | modify | delete;
	public PermissionElements getPermissionAccess() {
		return unknownRulePermission;
	}
	
	public EnumRule getPermissionRule() {
		return getPermissionAccess().getRule();
	}

	//// TODO user
	//enum FieldType:
	//	user | String | Date | dateTime | int | decimal | boolean;
	public FieldTypeElements getFieldTypeAccess() {
		return unknownRuleFieldType;
	}
	
	public EnumRule getFieldTypeRule() {
		return getFieldTypeAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
