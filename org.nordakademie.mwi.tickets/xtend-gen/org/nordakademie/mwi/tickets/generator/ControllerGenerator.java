package org.nordakademie.mwi.tickets.generator;

import com.google.common.base.Objects;
import java.util.Collection;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.nordakademie.mwi.tickets.tickets.Field;
import org.nordakademie.mwi.tickets.tickets.Flow;
import org.nordakademie.mwi.tickets.tickets.TicketCategory;
import org.nordakademie.mwi.tickets.tickets.TicketField;

@SuppressWarnings("all")
public class ControllerGenerator {
  public static CharSequence toController(final TicketCategory category) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package org.nordakademie.mwi.ticketSystem.controller;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.validation.Valid;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.nordakademie.mwi.ticketSystem.dao.");
    String _name = category.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "");
    _builder.append("Dao;");
    _builder.newLineIfNotEmpty();
    _builder.append("import org.nordakademie.mwi.ticketSystem.domain.");
    String _name_1 = category.getName();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_name_1);
    _builder.append(_firstUpper_1, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import org.springframework.beans.factory.annotation.Autowired;");
    _builder.newLine();
    _builder.append("import org.springframework.stereotype.Controller;");
    _builder.newLine();
    _builder.append("import org.springframework.transaction.annotation.Transactional;");
    _builder.newLine();
    _builder.append("import org.springframework.ui.Model;");
    _builder.newLine();
    _builder.append("import org.springframework.ui.ModelMap;");
    _builder.newLine();
    _builder.append("import org.springframework.validation.BindingResult;");
    _builder.newLine();
    _builder.append("import org.springframework.web.bind.annotation.ModelAttribute;");
    _builder.newLine();
    _builder.append("import org.springframework.web.bind.annotation.RequestMapping;");
    _builder.newLine();
    _builder.append("import org.springframework.web.bind.annotation.RequestMethod;");
    _builder.newLine();
    _builder.append("import org.springframework.web.bind.annotation.RequestParam;");
    _builder.newLine();
    {
      Flow _flow = category.getFlow();
      boolean _notEquals = (!Objects.equal(_flow, null));
      if (_notEquals) {
        _builder.append("import org.nordakademie.mwi.ticketSystem.flows.");
        Flow _flow_1 = category.getFlow();
        String _name_2 = _flow_1.getName();
        String _firstUpper_2 = StringExtensions.toFirstUpper(_name_2);
        _builder.append(_firstUpper_2, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    CharSequence _enumImports = ControllerGenerator.getEnumImports(category);
    _builder.append(_enumImports, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Controller");
    _builder.newLine();
    _builder.append("@Transactional");
    _builder.newLine();
    _builder.append("public class ");
    String _name_3 = category.getName();
    String _firstUpper_3 = StringExtensions.toFirstUpper(_name_3);
    _builder.append(_firstUpper_3, "");
    _builder.append("Controller {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Autowired");
    _builder.newLine();
    _builder.append("\t");
    String _name_4 = category.getName();
    String _firstUpper_4 = StringExtensions.toFirstUpper(_name_4);
    _builder.append(_firstUpper_4, "\t");
    _builder.append("Dao ");
    String _name_5 = category.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_5);
    _builder.append(_firstLower, "\t");
    _builder.append("Dao;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("@ModelAttribute");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("public ");
    String _name_6 = category.getName();
    String _firstUpper_5 = StringExtensions.toFirstUpper(_name_6);
    _builder.append(_firstUpper_5, "\t   ");
    _builder.append(" newRequest(@RequestParam(required=false) Long id, @RequestParam(required=false) ");
    String _name_7 = category.getName();
    String _firstUpper_6 = StringExtensions.toFirstUpper(_name_7);
    _builder.append(_firstUpper_6, "\t   ");
    _builder.append(" ");
    String _name_8 = category.getName();
    String _firstLower_1 = StringExtensions.toFirstLower(_name_8);
    _builder.append(_firstLower_1, "\t   ");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t       ");
    _builder.append("return (id != null ? ");
    String _name_9 = category.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_9);
    _builder.append(_firstLower_2, "\t       ");
    _builder.append("Dao.findById(id) : new ");
    String _name_10 = category.getName();
    String _firstUpper_7 = StringExtensions.toFirstUpper(_name_10);
    _builder.append(_firstUpper_7, "\t       ");
    _builder.append("());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t   ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@RequestMapping(value = \"/");
    String _name_11 = category.getName();
    String _lowerCase = _name_11.toLowerCase();
    _builder.append(_lowerCase, "\t");
    _builder.append("/create\", method = RequestMethod.GET)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public String create(Model model) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _enumValuesToInject = ControllerGenerator.getEnumValuesToInject(category);
    _builder.append(_enumValuesToInject, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return \"");
    String _name_12 = category.getName();
    String _lowerCase_1 = _name_12.toLowerCase();
    _builder.append(_lowerCase_1, "\t\t");
    _builder.append("/create\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@RequestMapping(value = \"/");
    String _name_13 = category.getName();
    String _lowerCase_2 = _name_13.toLowerCase();
    _builder.append(_lowerCase_2, "\t");
    _builder.append("/create\", method = RequestMethod.POST)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public String create(@Valid ");
    String _name_14 = category.getName();
    String _firstUpper_8 = StringExtensions.toFirstUpper(_name_14);
    _builder.append(_firstUpper_8, "\t");
    _builder.append(" ");
    String _name_15 = category.getName();
    String _firstLower_3 = StringExtensions.toFirstLower(_name_15);
    _builder.append(_firstLower_3, "\t");
    _builder.append(", BindingResult bindingResult, Model model) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (bindingResult.hasErrors()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    CharSequence _enumValuesToInject_1 = ControllerGenerator.getEnumValuesToInject(category);
    _builder.append(_enumValuesToInject_1, "\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("return \"/");
    String _name_16 = category.getName();
    String _lowerCase_3 = _name_16.toLowerCase();
    _builder.append(_lowerCase_3, "\t\t\t");
    _builder.append("/create\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    String _name_17 = category.getName();
    String _firstLower_4 = StringExtensions.toFirstLower(_name_17);
    _builder.append(_firstLower_4, "\t\t");
    _builder.append("Dao.makePersistent(");
    String _name_18 = category.getName();
    String _firstLower_5 = StringExtensions.toFirstLower(_name_18);
    _builder.append(_firstLower_5, "\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("model.addAttribute(\"id\", ");
    String _name_19 = category.getName();
    String _firstLower_6 = StringExtensions.toFirstLower(_name_19);
    _builder.append(_firstLower_6, "\t\t");
    _builder.append(".getId());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return \"redirect:show\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@RequestMapping(value = \"/");
    String _name_20 = category.getName();
    String _lowerCase_4 = _name_20.toLowerCase();
    _builder.append(_lowerCase_4, "\t");
    _builder.append("/show\", method = RequestMethod.GET)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public String show(");
    String _name_21 = category.getName();
    String _firstUpper_9 = StringExtensions.toFirstUpper(_name_21);
    _builder.append(_firstUpper_9, "\t");
    _builder.append(" ");
    String _name_22 = category.getName();
    String _firstLower_7 = StringExtensions.toFirstLower(_name_22);
    _builder.append(_firstLower_7, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return \"");
    String _name_23 = category.getName();
    String _lowerCase_5 = _name_23.toLowerCase();
    _builder.append(_lowerCase_5, "\t\t");
    _builder.append("/show\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@RequestMapping(value = \"/");
    String _name_24 = category.getName();
    String _lowerCase_6 = _name_24.toLowerCase();
    _builder.append(_lowerCase_6, "\t");
    _builder.append("/list\", method = RequestMethod.GET)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public String list(ModelMap map) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("map.put(\"");
    String _name_25 = category.getName();
    String _firstLower_8 = StringExtensions.toFirstLower(_name_25);
    _builder.append(_firstLower_8, "\t\t");
    _builder.append("s\", ");
    String _name_26 = category.getName();
    String _firstLower_9 = StringExtensions.toFirstLower(_name_26);
    _builder.append(_firstLower_9, "\t\t");
    _builder.append("Dao.findAll());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return \"");
    String _name_27 = category.getName();
    String _lowerCase_7 = _name_27.toLowerCase();
    _builder.append(_lowerCase_7, "\t\t");
    _builder.append("/list\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@RequestMapping(value = \"/");
    String _name_28 = category.getName();
    String _lowerCase_8 = _name_28.toLowerCase();
    _builder.append(_lowerCase_8, "\t");
    _builder.append("/delete\", method = RequestMethod.POST)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public String delete(");
    String _name_29 = category.getName();
    String _firstUpper_10 = StringExtensions.toFirstUpper(_name_29);
    _builder.append(_firstUpper_10, "\t");
    _builder.append(" ");
    String _name_30 = category.getName();
    String _firstLower_10 = StringExtensions.toFirstLower(_name_30);
    _builder.append(_firstLower_10, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _name_31 = category.getName();
    String _firstLower_11 = StringExtensions.toFirstLower(_name_31);
    _builder.append(_firstLower_11, "\t\t");
    _builder.append("Dao.makeTransient(");
    String _name_32 = category.getName();
    String _firstLower_12 = StringExtensions.toFirstLower(_name_32);
    _builder.append(_firstLower_12, "\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"redirect:list\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@RequestMapping(value = \"/");
    String _name_33 = category.getName();
    String _lowerCase_9 = _name_33.toLowerCase();
    _builder.append(_lowerCase_9, "\t");
    _builder.append("/edit\", method = RequestMethod.GET)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public String edit(");
    String _name_34 = category.getName();
    String _firstUpper_11 = StringExtensions.toFirstUpper(_name_34);
    _builder.append(_firstUpper_11, "\t");
    _builder.append(" ");
    String _name_35 = category.getName();
    String _firstLower_13 = StringExtensions.toFirstLower(_name_35);
    _builder.append(_firstLower_13, "\t");
    _builder.append(", Model model) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    CharSequence _enumValuesToInject_2 = ControllerGenerator.getEnumValuesToInject(category);
    _builder.append(_enumValuesToInject_2, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return \"");
    String _name_36 = category.getName();
    String _lowerCase_10 = _name_36.toLowerCase();
    _builder.append(_lowerCase_10, "\t\t");
    _builder.append("/edit\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@RequestMapping(value = \"/");
    String _name_37 = category.getName();
    String _lowerCase_11 = _name_37.toLowerCase();
    _builder.append(_lowerCase_11, "\t");
    _builder.append("/edit\", method = RequestMethod.POST)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public String edit(@Valid ");
    String _name_38 = category.getName();
    String _firstUpper_12 = StringExtensions.toFirstUpper(_name_38);
    _builder.append(_firstUpper_12, "\t");
    _builder.append(" ");
    String _name_39 = category.getName();
    String _firstLower_14 = StringExtensions.toFirstLower(_name_39);
    _builder.append(_firstLower_14, "\t");
    _builder.append(", BindingResult bindingResult, Model model) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (bindingResult.hasErrors()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    CharSequence _enumValuesToInject_3 = ControllerGenerator.getEnumValuesToInject(category);
    _builder.append(_enumValuesToInject_3, "\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("return \"/");
    String _name_40 = category.getName();
    String _lowerCase_12 = _name_40.toLowerCase();
    _builder.append(_lowerCase_12, "\t\t\t");
    _builder.append("/edit\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    String _name_41 = category.getName();
    String _firstUpper_13 = StringExtensions.toFirstUpper(_name_41);
    _builder.append(_firstUpper_13, "\t\t");
    _builder.append(" orig =  ");
    String _name_42 = category.getName();
    String _firstLower_15 = StringExtensions.toFirstLower(_name_42);
    _builder.append(_firstLower_15, "\t\t");
    _builder.append("Dao.findById(");
    String _name_43 = category.getName();
    String _firstLower_16 = StringExtensions.toFirstLower(_name_43);
    _builder.append(_firstLower_16, "\t\t");
    _builder.append(".getId());");
    _builder.newLineIfNotEmpty();
    {
      EList<TicketField> _ticketFields = category.getTicketFields();
      for(final TicketField field : _ticketFields) {
        _builder.append("\t\t");
        _builder.append("orig.set");
        Field _field = field.getField();
        String _name_44 = _field.getName();
        String _firstUpper_14 = StringExtensions.toFirstUpper(_name_44);
        _builder.append(_firstUpper_14, "\t\t");
        _builder.append("(");
        String _name_45 = category.getName();
        String _firstLower_17 = StringExtensions.toFirstLower(_name_45);
        _builder.append(_firstLower_17, "\t\t");
        _builder.append(".get");
        Field _field_1 = field.getField();
        String _name_46 = _field_1.getName();
        String _firstUpper_15 = StringExtensions.toFirstUpper(_name_46);
        _builder.append(_firstUpper_15, "\t\t");
        _builder.append("());");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      Flow _flow_2 = category.getFlow();
      boolean _notEquals_1 = (!Objects.equal(_flow_2, null));
      if (_notEquals_1) {
        _builder.append("\t\t");
        _builder.append("orig.setCurrentFlowState(");
        String _name_47 = category.getName();
        String _firstLower_18 = StringExtensions.toFirstLower(_name_47);
        _builder.append(_firstLower_18, "\t\t");
        _builder.append(".getCurrentFlowState());");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("model.addAttribute(\"id\",  ");
    String _name_48 = category.getName();
    String _firstLower_19 = StringExtensions.toFirstLower(_name_48);
    _builder.append(_firstLower_19, "\t\t");
    _builder.append(".getId());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return \"redirect:show\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      Flow _flow_3 = category.getFlow();
      boolean _notEquals_2 = (!Objects.equal(_flow_3, null));
      if (_notEquals_2) {
        _builder.append("\t");
        _builder.append("@RequestMapping(value = \"/");
        String _name_49 = category.getName();
        String _lowerCase_13 = _name_49.toLowerCase();
        _builder.append(_lowerCase_13, "\t");
        _builder.append("/nextState\", method = RequestMethod.POST)");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("public String nextState(");
        String _name_50 = category.getName();
        String _firstUpper_16 = StringExtensions.toFirstUpper(_name_50);
        _builder.append(_firstUpper_16, "\t");
        _builder.append(" ");
        String _name_51 = category.getName();
        String _firstLower_20 = StringExtensions.toFirstLower(_name_51);
        _builder.append(_firstLower_20, "\t");
        _builder.append(", Model model) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        String _name_52 = category.getName();
        String _firstLower_21 = StringExtensions.toFirstLower(_name_52);
        _builder.append(_firstLower_21, "\t\t");
        _builder.append(" = ");
        String _name_53 = category.getName();
        String _firstLower_22 = StringExtensions.toFirstLower(_name_53);
        _builder.append(_firstLower_22, "\t\t");
        _builder.append("Dao.findById(");
        String _name_54 = category.getName();
        String _firstLower_23 = StringExtensions.toFirstLower(_name_54);
        _builder.append(_firstLower_23, "\t\t");
        _builder.append(".getId());");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        String _name_55 = category.getName();
        String _firstLower_24 = StringExtensions.toFirstLower(_name_55);
        _builder.append(_firstLower_24, "\t\t");
        _builder.append(".setCurrentFlowState(");
        Flow _flow_4 = category.getFlow();
        String _name_56 = _flow_4.getName();
        String _firstUpper_17 = StringExtensions.toFirstUpper(_name_56);
        _builder.append(_firstUpper_17, "\t\t");
        _builder.append(".values()[");
        String _name_57 = category.getName();
        String _firstLower_25 = StringExtensions.toFirstLower(_name_57);
        _builder.append(_firstLower_25, "\t\t");
        _builder.append(".getCurrentFlowState().ordinal() + 1]);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("model.addAttribute(\"id\", ");
        String _name_58 = category.getName();
        String _firstLower_26 = StringExtensions.toFirstLower(_name_58);
        _builder.append(_firstLower_26, "\t\t");
        _builder.append(".getId());");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return \"redirect:show\";");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@RequestMapping(value = \"/");
        String _name_59 = category.getName();
        String _lowerCase_14 = _name_59.toLowerCase();
        _builder.append(_lowerCase_14, "\t");
        _builder.append("/prevState\", method = RequestMethod.POST)");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("public String prevState(");
        String _name_60 = category.getName();
        String _firstUpper_18 = StringExtensions.toFirstUpper(_name_60);
        _builder.append(_firstUpper_18, "\t");
        _builder.append(" ");
        String _name_61 = category.getName();
        String _firstLower_27 = StringExtensions.toFirstLower(_name_61);
        _builder.append(_firstLower_27, "\t");
        _builder.append(", Model model) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        String _name_62 = category.getName();
        String _firstLower_28 = StringExtensions.toFirstLower(_name_62);
        _builder.append(_firstLower_28, "\t\t");
        _builder.append(" = ");
        String _name_63 = category.getName();
        String _firstLower_29 = StringExtensions.toFirstLower(_name_63);
        _builder.append(_firstLower_29, "\t\t");
        _builder.append("Dao.findById(");
        String _name_64 = category.getName();
        String _firstLower_30 = StringExtensions.toFirstLower(_name_64);
        _builder.append(_firstLower_30, "\t\t");
        _builder.append(".getId());");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        String _name_65 = category.getName();
        String _firstLower_31 = StringExtensions.toFirstLower(_name_65);
        _builder.append(_firstLower_31, "\t\t");
        _builder.append(".setCurrentFlowState(");
        Flow _flow_5 = category.getFlow();
        String _name_66 = _flow_5.getName();
        String _firstUpper_19 = StringExtensions.toFirstUpper(_name_66);
        _builder.append(_firstUpper_19, "\t\t");
        _builder.append(".values()[");
        String _name_67 = category.getName();
        String _firstLower_32 = StringExtensions.toFirstLower(_name_67);
        _builder.append(_firstLower_32, "\t\t");
        _builder.append(".getCurrentFlowState().ordinal() - 1]);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("model.addAttribute(\"id\", ");
        String _name_68 = category.getName();
        String _firstLower_33 = StringExtensions.toFirstLower(_name_68);
        _builder.append(_firstLower_33, "\t\t");
        _builder.append(".getId());");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return \"redirect:show\";");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public static CharSequence toIndexController(final Collection<TicketCategory> categories) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package org.nordakademie.mwi.ticketSystem.controller;");
    _builder.newLine();
    _builder.newLine();
    {
      for(final TicketCategory category : categories) {
        _builder.append("import org.nordakademie.mwi.ticketSystem.dao.");
        String _name = category.getName();
        String _firstUpper = StringExtensions.toFirstUpper(_name);
        _builder.append(_firstUpper, "");
        _builder.append("Dao;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("import org.springframework.beans.factory.annotation.Autowired;");
    _builder.newLine();
    _builder.append("import org.springframework.stereotype.Controller;");
    _builder.newLine();
    _builder.append("import org.springframework.transaction.annotation.Transactional;");
    _builder.newLine();
    _builder.append("import org.springframework.ui.Model;");
    _builder.newLine();
    _builder.append("import org.springframework.web.bind.annotation.RequestMapping;");
    _builder.newLine();
    _builder.append("import org.springframework.web.bind.annotation.RequestMethod;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Controller");
    _builder.newLine();
    _builder.append("@Transactional");
    _builder.newLine();
    _builder.append("public class IndexController {");
    _builder.newLine();
    _builder.newLine();
    {
      for(final TicketCategory category_1 : categories) {
        _builder.append("\t");
        _builder.append("@Autowired");
        _builder.newLine();
        _builder.append("\t");
        String _name_1 = category_1.getName();
        String _firstUpper_1 = StringExtensions.toFirstUpper(_name_1);
        _builder.append(_firstUpper_1, "\t");
        _builder.append("Dao ");
        String _name_2 = category_1.getName();
        String _firstLower = StringExtensions.toFirstLower(_name_2);
        _builder.append(_firstLower, "\t");
        _builder.append("Dao;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@RequestMapping(value = \"/index\", method = RequestMethod.GET)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String create(Model model) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      for(final TicketCategory category_2 : categories) {
        _builder.append("\t\t");
        _builder.append("model.addAttribute(\"");
        String _name_3 = category_2.getName();
        String _firstLower_1 = StringExtensions.toFirstLower(_name_3);
        _builder.append(_firstLower_1, "\t\t");
        _builder.append("Count\", ");
        String _name_4 = category_2.getName();
        String _firstLower_2 = StringExtensions.toFirstLower(_name_4);
        _builder.append(_firstLower_2, "\t\t");
        _builder.append("Dao.count());");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("return \"index\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@RequestMapping(value = \"/\", method = RequestMethod.GET)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String home() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"redirect:index\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public static CharSequence getEnumValuesToInject(final TicketCategory category) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Flow _flow = category.getFlow();
      boolean _notEquals = (!Objects.equal(_flow, null));
      if (_notEquals) {
        _builder.append("model.addAttribute(\"states\", ");
        Flow _flow_1 = category.getFlow();
        String _name = _flow_1.getName();
        String _firstUpper = StringExtensions.toFirstUpper(_name);
        _builder.append(_firstUpper, "");
        _builder.append(".values());");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<TicketField> _ticketFields = category.getTicketFields();
      for(final TicketField field : _ticketFields) {
        {
          Field _field = field.getField();
          org.nordakademie.mwi.tickets.tickets.Enum _fieldEnum = _field.getFieldEnum();
          boolean _notEquals_1 = (!Objects.equal(_fieldEnum, null));
          if (_notEquals_1) {
            _builder.append("model.addAttribute(\"");
            Field _field_1 = field.getField();
            String _name_1 = _field_1.getName();
            String _firstLower = StringExtensions.toFirstLower(_name_1);
            _builder.append(_firstLower, "");
            _builder.append("EnumValues\", ");
            Field _field_2 = field.getField();
            String _name_2 = _field_2.getName();
            String _firstUpper_1 = StringExtensions.toFirstUpper(_name_2);
            _builder.append(_firstUpper_1, "");
            _builder.append("Enum.values());");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public static CharSequence getEnumImports(final TicketCategory category) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<TicketField> _ticketFields = category.getTicketFields();
      for(final TicketField field : _ticketFields) {
        {
          Field _field = field.getField();
          org.nordakademie.mwi.tickets.tickets.Enum _fieldEnum = _field.getFieldEnum();
          boolean _notEquals = (!Objects.equal(_fieldEnum, null));
          if (_notEquals) {
            _builder.append("import org.nordakademie.mwi.ticketSystem.domain.");
            Field _field_1 = field.getField();
            String _name = _field_1.getName();
            String _firstUpper = StringExtensions.toFirstUpper(_name);
            _builder.append(_firstUpper, "");
            _builder.append("Enum;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
}
