/**
 * generated by Xtext
 */
package org.nordakademie.mwi.tickets.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.nordakademie.mwi.tickets.TicketsOutputConfigurationProvider;
import org.nordakademie.mwi.tickets.tickets.Field;
import org.nordakademie.mwi.tickets.tickets.FieldType;
import org.nordakademie.mwi.tickets.tickets.TicketCategory;
import org.nordakademie.mwi.tickets.tickets.TicketField;
import org.nordakademie.mwi.tickets.tickets.TicketSystem;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class TicketsGenerator implements IGenerator {
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    EList<EObject> _contents = resource.getContents();
    Iterable<TicketSystem> _filter = Iterables.<TicketSystem>filter(_contents, TicketSystem.class);
    TicketSystem _head = IterableExtensions.<TicketSystem>head(_filter);
    EList<TicketCategory> _categories = _head.getCategories();
    for (final TicketCategory category : _categories) {
      {
        String _name = category.getName();
        String _firstUpper = StringExtensions.toFirstUpper(_name);
        String _plus = ("org/nordakademie/mwi/ticketExample/domain/" + _firstUpper);
        String _plus_1 = (_plus + ".java");
        CharSequence _domainObject = this.toDomainObject(category);
        fsa.generateFile(_plus_1, _domainObject);
        String _name_1 = category.getName();
        String _lowerCase = _name_1.toLowerCase();
        String _plus_2 = (_lowerCase + "/create.jsp");
        CharSequence _jsp = this.toJsp(category);
        fsa.generateFile(_plus_2, TicketsOutputConfigurationProvider.JSP_OUTPUT, _jsp);
      }
    }
  }
  
  public CharSequence toDomainObject(final TicketCategory category) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package org.nordakademie.mwi.ticketExample.domain;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.persistence.Basic;");
    _builder.newLine();
    _builder.append("import javax.persistence.Entity;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Entity");
    _builder.newLine();
    _builder.append("public class ");
    String _name = category.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "");
    _builder.append(" extends AbstractDomainObject {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      EList<TicketField> _ticketFields = category.getTicketFields();
      for(final TicketField field : _ticketFields) {
        _builder.append("\t");
        _builder.append("@Basic(optional = ");
        boolean _isMandatory = field.isMandatory();
        boolean _not = (!_isMandatory);
        _builder.append(_not, "\t");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("private ");
        Field _field = field.getField();
        FieldType _fieldType = _field.getFieldType();
        String _string = _fieldType.toString();
        _builder.append(_string, "\t");
        _builder.append(" ");
        Field _field_1 = field.getField();
        String _name_1 = _field_1.getName();
        _builder.append(_name_1, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ");
    String _name_2 = category.getName();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_name_2);
    _builder.append(_firstUpper_1, "    ");
    _builder.append(" () {}");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.newLine();
    {
      EList<TicketField> _ticketFields_1 = category.getTicketFields();
      for(final TicketField field_1 : _ticketFields_1) {
        _builder.append("    ");
        _builder.append("public ");
        Field _field_2 = field_1.getField();
        FieldType _fieldType_1 = _field_2.getFieldType();
        String _string_1 = _fieldType_1.toString();
        _builder.append(_string_1, "    ");
        _builder.append(" get");
        Field _field_3 = field_1.getField();
        String _name_3 = _field_3.getName();
        String _firstUpper_2 = StringExtensions.toFirstUpper(_name_3);
        _builder.append(_firstUpper_2, "    ");
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("\t");
        _builder.append("return ");
        Field _field_4 = field_1.getField();
        String _name_4 = _field_4.getName();
        _builder.append(_name_4, "    \t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    ");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public void set");
        Field _field_5 = field_1.getField();
        String _name_5 = _field_5.getName();
        String _firstUpper_3 = StringExtensions.toFirstUpper(_name_5);
        _builder.append(_firstUpper_3, "    ");
        _builder.append("(");
        Field _field_6 = field_1.getField();
        FieldType _fieldType_2 = _field_6.getFieldType();
        String _string_2 = _fieldType_2.toString();
        _builder.append(_string_2, "    ");
        _builder.append(" ");
        Field _field_7 = field_1.getField();
        String _name_6 = _field_7.getName();
        _builder.append(_name_6, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append(" \t");
        _builder.append("this.");
        Field _field_8 = field_1.getField();
        String _name_7 = _field_8.getName();
        _builder.append(_name_7, "     \t");
        _builder.append(" = ");
        Field _field_9 = field_1.getField();
        String _name_8 = _field_9.getName();
        _builder.append(_name_8, "     \t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean equals(Object obj) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (this == obj)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (obj == null)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (getClass() != obj.getClass())");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    String _name_9 = category.getName();
    String _firstUpper_4 = StringExtensions.toFirstUpper(_name_9);
    _builder.append(_firstUpper_4, "\t\t");
    _builder.append(" other = (");
    String _name_10 = category.getName();
    String _firstUpper_5 = StringExtensions.toFirstUpper(_name_10);
    _builder.append(_firstUpper_5, "\t\t");
    _builder.append(") obj;");
    _builder.newLineIfNotEmpty();
    {
      EList<TicketField> _ticketFields_2 = category.getTicketFields();
      for(final TicketField field_2 : _ticketFields_2) {
        _builder.append("\t\t");
        _builder.append("if (");
        Field _field_10 = field_2.getField();
        String _name_11 = _field_10.getName();
        _builder.append(_name_11, "\t\t");
        _builder.append(" == null) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("if (other.");
        Field _field_11 = field_2.getField();
        String _name_12 = _field_11.getName();
        _builder.append(_name_12, "\t\t");
        _builder.append(" != null)");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("return false;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("} else if (!");
        Field _field_12 = field_2.getField();
        String _name_13 = _field_12.getName();
        _builder.append(_name_13, "\t\t");
        _builder.append(".equals(other.");
        Field _field_13 = field_2.getField();
        String _name_14 = _field_13.getName();
        _builder.append(_name_14, "\t\t");
        _builder.append("))");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("return false;");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence toJsp(final TicketCategory category) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%>");
    _builder.newLine();
    _builder.append("<%@ taglib prefix=\"fmt\" uri=\"http://java.sun.com/jsp/jstl/fmt\" %>");
    _builder.newLine();
    _builder.append("<%@ taglib prefix=\"form\" uri=\"http://www.springframework.org/tags/form\"%>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("<%@include file=\"../navigation.jspf\"%>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("<h1>");
    String _description = category.getDescription();
    _builder.append(_description, "");
    _builder.append(" create</h1>");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("<c:url var=\"url\" value=\"/");
    String _name = category.getName();
    String _lowerCase = _name.toLowerCase();
    _builder.append(_lowerCase, "");
    _builder.append("/create\" /> ");
    _builder.newLineIfNotEmpty();
    _builder.append("<form:form action=\"${url}\" commandName=\"");
    String _name_1 = category.getName();
    String _lowerCase_1 = _name_1.toLowerCase();
    _builder.append(_lowerCase_1, "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("<form:hidden path=\"id\" />");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<fieldset>");
    _builder.newLine();
    {
      EList<TicketField> _ticketFields = category.getTicketFields();
      for(final TicketField field : _ticketFields) {
        _builder.append("<div class=\"form-row\">");
        _builder.newLine();
        _builder.append("          ");
        _builder.append("<label for=\"title\">");
        Field _field = field.getField();
        String _label = _field.getLabel();
        _builder.append(_label, "          ");
        _builder.append(":</label>");
        _builder.newLineIfNotEmpty();
        _builder.append("          ");
        _builder.append("<span class=\"input\"><form:input path=\"");
        Field _field_1 = field.getField();
        String _name_2 = _field_1.getName();
        _builder.append(_name_2, "          ");
        _builder.append("\" /></span>");
        _builder.newLineIfNotEmpty();
        _builder.append("</div>   ");
        _builder.newLine();
      }
    }
    _builder.append("\t    ");
    _builder.append("<div class=\"form-buttons\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<div class=\"button\"><input name=\"submit\" type=\"submit\" value=\"Save\" /></div>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</fieldset>");
    _builder.newLine();
    _builder.append("</form:form>");
    _builder.newLine();
    return _builder;
  }
}
